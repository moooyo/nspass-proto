syntax = "proto3";

package nspass.egress.v1;

import "common.proto";
import "model/trafficStat.proto";
import "model/node.proto";
import "model/egressItem.proto";
import "model/egress.proto";

option go_package = "github.com/moooyo/nspass-backend/generated/egress;nspassegress";

// 心跳请求
message HeartbeatRequest {
  string nodeId = 1;
  nspass.model.v1.NodeStatus status = 2;
  repeated nspass.model.v1.TrafficStat trafficStats = 3;
  double cpuLoad = 4;
  double memoryUsage = 5;
  double diskUsage = 6;
  int32 activeConnections = 7;
}

// 心跳响应
message HeartbeatResponse {
  nspass.common.v1.ApiResponse base = 1;
  int64 serverTime = 2; // 服务器时间，用于时间同步
  repeated ConfigUpdate configUpdates = 3; // 配置更新
  bool needFullSync = 4; // 是否需要完全同步
}

// 配置更新类型
enum ConfigUpdateType {
  CONFIG_UPDATE_TYPE_UNSPECIFIED = 0;
  CONFIG_UPDATE_TYPE_USER = 1;
  CONFIG_UPDATE_TYPE_SYSTEM = 2;
  CONFIG_UPDATE_TYPE_FORWARDING_RULE = 3;
}

// 配置更新
message ConfigUpdate {
  ConfigUpdateType type = 1;
  string targetId = 2; // 用户ID或系统配置ID
  string configJson = 3; // JSON格式的配置数据
}

// 注册节点请求
message RegisterNodeRequest {
  string hostname = 1;
  string ipv4 = 2;
  string ipv6 = 3;
  nspass.model.v1.NodeType type = 4;
  string region = 5;
  string version = 6;
  map<string, string> capabilities = 7;
  string apiKey = 8; // 用于验证
}

// 注册节点响应
message RegisterNodeResponse {
  nspass.common.v1.ApiResponse base = 1;
  string nodeId = 2;
  string configJson = 3; // 初始配置
}

// 同步请求
message SyncRequest {
  string nodeId = 1;
  int64 lastSyncTimestamp = 2;
}

// 同步响应
message SyncResponse {
  nspass.common.v1.ApiResponse base = 1;
  string fullConfigJson = 2; // 完整配置
  int64 syncTimestamp = 3;
}

// 用户流量上报请求
message UserTrafficReportRequest {
  string nodeId = 1;
  repeated nspass.model.v1.UserTrafficRecord records = 2;
}

// 用户流量上报响应
message UserTrafficReportResponse {
  nspass.common.v1.ApiResponse base = 1;
  repeated string updatedUserIds = 2; // 需要更新配置的用户ID列表
}

// 出口节点服务
service EgressService {
  // 心跳检测
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // 注册节点
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse);
  
  // 同步配置
  rpc SyncConfig(SyncRequest) returns (SyncResponse);
  
  // 上报用户流量
  rpc ReportUserTraffic(UserTrafficReportRequest) returns (UserTrafficReportResponse);
}



// 创建出口请求
message CreateEgressRequest {
  optional string egressId = 1;
  string serverId = 2;
  nspass.model.v1.EgressMode egressMode = 3;
  
  // 直出模式字段
  optional string targetAddress = 4;
  
  // iptables模式字段
  optional nspass.model.v1.ForwardType forwardType = 5;
  optional string destAddress = 6;
  optional string destPort = 7;
  
  // shadowsocks-2022模式字段
  optional string password = 8;
  optional bool supportUdp = 9;
}

// 更新出口请求
message UpdateEgressRequest {
  optional string egressId = 1;
  optional string serverId = 2;
  optional nspass.model.v1.EgressMode egressMode = 3;
  optional string targetAddress = 4;
  optional nspass.model.v1.ForwardType forwardType = 5;
  optional string destAddress = 6;
  optional string destPort = 7;
  optional string password = 8;
  optional bool supportUdp = 9;
}

// 出口列表查询参数
message EgressListParams {
  optional int32 page = 1;
  optional int32 pageSize = 2;
  optional string egressId = 3;
  optional string serverId = 4;
  optional nspass.model.v1.EgressMode egressMode = 5;
}

// 出口列表响应
message EgressListResponse {
  repeated nspass.model.v1.EgressItem items = 1;
  int32 total = 2;
  int32 page = 3;
  int32 pageSize = 4;
}

// 测试连接响应
message TestConnectionResponse {
  bool success = 1;
  int32 latency = 2;
  optional string error = 3;
}

// 出口统计响应
message EgressStatsResponse {
  int32 connectionsCount = 1;
  int64 bytesTransferred = 2;
  string lastActivity = 3;
}

// 可用服务器项目
message AvailableServerItem {
  string label = 1;
  string value = 2;
}

// 可用服务器列表响应
message AvailableServersResponse {
  repeated AvailableServerItem servers = 1;
}

// 配置验证响应
message ValidateConfigResponse {
  bool valid = 1;
  repeated string errors = 2;
}

 