syntax = "proto3";

package nspass.api.egress.v1;

option go_package = "github.com/moooyo/nspass-proto/generated/api/egress;nspassapiegress";

import "common.proto";
import "google/api/annotations.proto";
import "model/egress.proto";
import "model/egressItem.proto";

// 创建出口请求
message CreateEgressRequest {
  optional string egressName = 2;  // 显示名称
  string serverId = 3;
  nspass.model.v1.EgressMode egressMode = 4;

  // 通用字段
  optional string password = 5;  // 通用密码字段
  optional int32 port = 6;       // 通用端口字段

  // 代理配置（JSON格式）
  // 前端根据 egressMode 传入对应的配置 JSON 字符串
  string egressConfig = 7;       // 序列化的代理配置（JSON格式）

  optional uint32 dnsConfigId = 8;  // 关联的dns配置ID 
}

// 更新出口请求
message UpdateEgressRequest {
  int32 id = 1;                  // 使用自增主键ID
  optional string egressName = 3;  // 显示名称
  optional string serverId = 4;
  optional nspass.model.v1.EgressMode egressMode = 5;

  // 通用字段
  optional string password = 6;  // 通用密码字段
  optional int32 port = 7;       // 通用端口字段

  // 代理配置（JSON格式）
  // 前端根据 egressMode 传入对应的配置 JSON 字符串
  optional string egressConfig = 8;  // 序列化的代理配置（JSON格式）

  optional uint32 dnsConfigId = 9;  // 关联的dns配置ID
}

// 获取出口详情请求
message GetEgressRequest {
  int32 id = 1;                  // 使用自增主键ID
}

// 删除出口请求
message DeleteEgressRequest {
  int32 id = 1;                  // 使用自增主键ID
}

// 出口列表查询参数
message GetEgressListRequest {
  optional int32 page = 1;
  optional int32 pageSize = 2;
  optional string egressName = 3;  // 改为egressName用于查询
  optional string serverId = 4;
  optional nspass.model.v1.EgressMode egressMode = 5;
}

// 测试出口连接请求
message TestEgressConnectionRequest {
  int32 id = 1;                  // 使用自增主键ID
  optional int32 timeout = 2;  // 超时时间（秒）
}

// 获取出口统计请求
message GetEgressStatsRequest {
  int32 id = 1;                  // 使用自增主键ID
  optional int32 days = 2;  // 统计天数
}

// 获取可用服务器列表请求
message GetAvailableServersRequest {}

// 验证出口配置请求
message ValidateEgressConfigRequest {
  nspass.model.v1.EgressMode egressMode = 1;
  string egressConfig = 2;  // JSON 格式的配置
}

// === 响应消息 ===

message CreateEgressResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional nspass.model.v1.EgressItem data = 2;
}

message GetEgressResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional nspass.model.v1.EgressItem data = 2;
}

message UpdateEgressResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional nspass.model.v1.EgressItem data = 2;
}

message DeleteEgressResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
}

message GetEgressListResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  repeated nspass.model.v1.EgressItem data = 2;
  optional nspass.common.v1.PaginationResponse pagination = 3;
}

message TestEgressConnectionResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional int32 latency = 4;
  optional string error = 5;
}

message GetEgressStatsResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional int32 connectionsCount = 4;
  optional int64 bytesTransferred = 5;
  optional string lastActivity = 6;
}

message AvailableServerItem {
  string label = 1;
  string value = 2;
}

message GetAvailableServersResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  repeated AvailableServerItem data = 2;
}

message ValidateEgressConfigResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional bool valid = 4;
  repeated string errors = 5;
}

// === 服务定义 ===

service EgressManagementService {
  // 创建出口
  rpc CreateEgress(CreateEgressRequest) returns (CreateEgressResponse) {
    option (google.api.http) = {
      post: "/v1/egress"
      body: "*"
    };
  }

  // 获取出口列表
  rpc GetEgressList(GetEgressListRequest) returns (GetEgressListResponse) {
    option (google.api.http) = {
      get: "/v1/egress"
    };
  }

  // 获取出口详情
  rpc GetEgress(GetEgressRequest) returns (GetEgressResponse) {
    option (google.api.http) = {
      get: "/v1/egress/{id}"
    };
  }

  // 更新出口
  rpc UpdateEgress(UpdateEgressRequest) returns (UpdateEgressResponse) {
    option (google.api.http) = {
      put: "/v1/egress/{id}"
      body: "*"
    };
  }

  // 删除出口
  rpc DeleteEgress(DeleteEgressRequest) returns (DeleteEgressResponse) {
    option (google.api.http) = {
      delete: "/v1/egress/{id}"
    };
  }

  // 测试出口连接
  rpc TestEgressConnection(TestEgressConnectionRequest) returns (TestEgressConnectionResponse) {
    option (google.api.http) = {
      post: "/v1/egress/{id}/test"
      body: "*"
    };
  }

  // 获取出口统计
  rpc GetEgressStats(GetEgressStatsRequest) returns (GetEgressStatsResponse) {
    option (google.api.http) = {
      get: "/v1/egress/{id}/stats"
    };
  }

  // 获取可用服务器列表
  rpc GetAvailableServers(GetAvailableServersRequest) returns (GetAvailableServersResponse) {
    option (google.api.http) = {
      get: "/v1/egress/available-servers"
    };
  }

  // 验证出口配置
  rpc ValidateEgressConfig(ValidateEgressConfigRequest) returns (ValidateEgressConfigResponse) {
    option (google.api.http) = {
      post: "/v1/egress/validate-config"
      body: "*"
    };
  }
} 
