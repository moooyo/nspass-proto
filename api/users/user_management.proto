syntax = "proto3";

package nspass.api.users.v1;

option go_package = "github.com/moooyo/nspass-backend/generated/api/users;nspassapiusers";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "common.proto";

// Import all the message types we need
import "api/users/user_auth.proto";
import "api/users/user_account.proto";
import "api/users/user_profile.proto";
import "api/users/user_password.proto";
import "api/users/user_avatar.proto";
import "api/users/user_traffic.proto";
import "api/users/user_login_history.proto";
import "api/users/user_activity.proto";
import "api/users/user_two_factor.proto";
import "api/users/user_config.proto";

// 用户管理服务 - 统一的用户管理入口
service UserManagementService {
  // 用户注册
  // 
  // 创建新用户账户，需要提供有效的用户名、邮箱和密码。
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/register"
      body: "*"
    };
  }

  // 用户登录
  // 
  // 验证用户凭据并返回JWT认证令牌。
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/login"
      body: "*"
    };
  }

  // 获取当前用户信息
  // 
  // 获取当前已认证用户的个人资料信息。
  // 需要有效的JWT令牌。
  rpc GetCurrentUserInfo(google.protobuf.Empty) returns (GetCurrentUserInfoResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/profile"
    };
  }

  // 更新用户信息
  // 
  // 修改当前用户的个人资料，如用户名等。
  // 需要认证，只能修改自己的信息。
  rpc UpdateUserInfo(UpdateUserInfoRequest) returns (UpdateCurrentUserInfoResponse) {
    option (google.api.http) = {
      put: "/api/v1/user/profile"
      body: "*"
    };
  }

  // 修改密码
  // 
  // 更改当前用户的登录密码。
  // 需要提供当前密码进行验证。
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/password"
      body: "*"
    };
  }

  // 删除账户
  // 
  // 永久删除当前用户账户及相关数据。
  // 此操作不可逆，需要确认密码。
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/account/delete"
      body: "*"
    };
  }

  // 上传头像
  // 
  // 上传或更新用户头像图片。
  // 支持常见图片格式，有大小限制。
  rpc UploadAvatar(UploadAvatarData) returns (UploadAvatarResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/avatar"
      body: "*"
    };
  }

  // 获取流量统计
  // 
  // 查看当前用户的流量使用情况，
  // 包括上传、下载流量和剩余配额。
  rpc GetTrafficStats(google.protobuf.Empty) returns (GetTrafficStatsResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/traffic"
    };
  }

  // 重置流量统计
  // 
  // 清零当前用户的流量使用记录。
  // 通常用于月度重置或管理员操作。
  rpc ResetTraffic(google.protobuf.Empty) returns (ResetTrafficResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/traffic/reset"
    };
  }

  // 登录历史
  rpc GetLoginHistory(GetLoginHistoryRequest) returns (GetLoginHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/login-history"
    };
  }

  // 活动日志
  rpc GetActivityLogs(GetActivityLogsRequest) returns (GetActivityLogsResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/activity"
    };
  }

  // 二步验证
  rpc ToggleTwoFactorAuth(ToggleTwoFactorAuthRequest) returns (ToggleTwoFactorAuthResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/2fa/toggle"
      body: "*"
    };
  }

  // 用户配置
  rpc GetUserConfig(GetUserConfigRequest) returns (GetUserConfigResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}/configs"
    };
  }

  rpc UpdateUserConfig(UpdateUserConfigRequest) returns (UpdateUserConfigResponse) {
    option (google.api.http) = {
      put: "/api/v1/users/{user_id}/configs/{config_key}"
      body: "*"
    };
  }

  rpc DeleteUserConfig(DeleteUserConfigRequest) returns (DeleteUserConfigResponse) {
    option (google.api.http) = {
      post: "/api/v1/users/{user_id}/configs/{config_key}/delete"
      body: "*"
    };
  }

  rpc GetUserConfigHistory(GetUserConfigHistoryRequest) returns (GetUserConfigHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}/configs/{config_key}/history/{version}"
    };
  }
} 