syntax = "proto3";

package nspass.api.forwardPath.v1;

option go_package = "github.com/moooyo/nspass-proto/generated/api/forwardPath;nspassapiforwardpath";

import "common.proto";
import "google/api/annotations.proto";
import "model/forwardPath.proto";
import "api/iptables/iptables_config.proto";

// 获取转发路径规则列表请求
message GetForwardPathRulesRequest {
  optional string rule_id = 1;             // 规则ID过滤
  optional nspass.model.v1.ForwardPathRuleType type = 2; // 类型过滤
  optional nspass.model.v1.ForwardPathRuleStatus status = 3; // 状态过滤
  optional int32 page = 4;                 // 页码
  optional int32 page_size = 5;            // 每页大小
}

// 获取转发路径规则列表响应
message GetForwardPathRulesResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  repeated nspass.model.v1.ForwardPathRule data = 2;
  optional nspass.common.v1.PaginationResponse pagination = 3;
}

// 创建转发路径规则请求
message CreateForwardPathRuleRequest {
  nspass.model.v1.ForwardPathRuleType type = 1; // 转发类型
  repeated string path_server_ids = 2;     // 路径服务器ID列表 (可选，为空时创建直接线路)
  int32 egress_id = 3;                     // 出口ID (使用自增ID)
  // 注意：egress_name 由后端根据 egress_id 自动填充
  // 当 path_server_ids 为空时，将直接创建线路而不是转发规则
}

// 创建转发路径规则响应
message CreateForwardPathRuleResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional nspass.model.v1.ForwardPathRule data = 2;
}

// 获取单个转发路径规则请求
message GetForwardPathRuleRequest {
  int32 id = 1;                            // 规则ID (使用自增ID)
}

// 获取单个转发路径规则响应
message GetForwardPathRuleResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional nspass.model.v1.ForwardPathRule data = 2;
}

// 更新转发路径规则请求
message UpdateForwardPathRuleRequest {
  int32 id = 1;                            // 规则ID (使用自增ID)
  optional nspass.model.v1.ForwardPathRuleType type = 2; // 转发类型
  optional nspass.model.v1.ForwardPathRuleStatus status = 3; // 状态
  repeated string path_server_ids = 4;     // 路径服务器ID列表
  optional int32 egress_id = 5;            // 出口ID (使用自增ID)
  // 注意：name 和 egress_name 由后端自动管理，无需在请求中指定
}

// 更新转发路径规则响应
message UpdateForwardPathRuleResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional nspass.model.v1.ForwardPathRule data = 2;
}

// 删除转发路径规则请求
message DeleteForwardPathRuleRequest {
  int32 id = 1;                            // 规则ID (使用自增ID)
}

// 删除转发路径规则响应
message DeleteForwardPathRuleResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
}

// 启用转发路径规则请求
message EnableForwardPathRuleRequest {
  int32 id = 1;                            // 规则ID (使用自增ID)
}

// 启用转发路径规则响应
message EnableForwardPathRuleResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
}

// 禁用转发路径规则请求
message DisableForwardPathRuleRequest {
  int32 id = 1;                            // 规则ID (使用自增ID)
}

// 禁用转发路径规则响应
message DisableForwardPathRuleResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
}

// 获取转发路径规则流量统计请求
message GetForwardPathRuleTrafficRequest {
  int32 id = 1;                            // 规则ID (使用自增ID)
  optional int32 days = 2;                 // 统计天数，默认7天
}

// 转发路径规则流量统计响应
message GetForwardPathRuleTrafficResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional int64 total_upload = 4;                  // 总上行流量
  optional int64 total_download = 5;                // 总下行流量
  repeated TrafficDataPoint daily_stats = 6; // 每日统计
}

// 流量数据点
message TrafficDataPoint {
  string date = 1;                         // 日期
  int64 upload = 2;                        // 上行流量
  int64 download = 3;                      // 下行流量
}

// 重建所有转发路径规则iptables规则请求
message RebuildAllIptablesRulesRequest {
  // 空消息，不需要参数
}

// 重建所有转发路径规则iptables规则响应
message RebuildAllIptablesRulesResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
}

// 转发路径规则管理服务
service ForwardPathRuleService {
  // 获取转发路径规则列表
  rpc GetForwardPathRules(GetForwardPathRulesRequest) returns (GetForwardPathRulesResponse) {
    option (google.api.http) = {
      get: "/v1/forward-path-rules"
    };
  }

  // 创建转发路径规则
  rpc CreateForwardPathRule(CreateForwardPathRuleRequest) returns (CreateForwardPathRuleResponse) {
    option (google.api.http) = {
      post: "/v1/forward-path-rules"
      body: "*"
    };
  }

  // 获取单个转发路径规则
  rpc GetForwardPathRule(GetForwardPathRuleRequest) returns (GetForwardPathRuleResponse) {
    option (google.api.http) = {
      get: "/v1/forward-path-rules/{id}"
    };
  }

  // 更新转发路径规则
  rpc UpdateForwardPathRule(UpdateForwardPathRuleRequest) returns (UpdateForwardPathRuleResponse) {
    option (google.api.http) = {
      put: "/v1/forward-path-rules/{id}"
      body: "*"
    };
  }

  // 删除转发路径规则
  rpc DeleteForwardPathRule(DeleteForwardPathRuleRequest) returns (DeleteForwardPathRuleResponse) {
    option (google.api.http) = {
      delete: "/v1/forward-path-rules/{id}"
    };
  }

  // 启用转发路径规则
  rpc EnableForwardPathRule(EnableForwardPathRuleRequest) returns (EnableForwardPathRuleResponse) {
    option (google.api.http) = {
      post: "/v1/forward-path-rules/{id}/enable"
      body: "*"
    };
  }

  // 禁用转发路径规则
  rpc DisableForwardPathRule(DisableForwardPathRuleRequest) returns (DisableForwardPathRuleResponse) {
    option (google.api.http) = {
      post: "/v1/forward-path-rules/{id}/disable"
      body: "*"
    };
  }

  // 获取转发路径规则流量统计
  rpc GetForwardPathRuleTraffic(GetForwardPathRuleTrafficRequest) returns (GetForwardPathRuleTrafficResponse) {
    option (google.api.http) = {
      get: "/v1/forward-path-rules/{id}/traffic"
    };
  }

  // 重建所有转发路径规则的iptables规则
  rpc RebuildAllIptablesRules(RebuildAllIptablesRulesRequest) returns (RebuildAllIptablesRulesResponse) {
    option (google.api.http) = {
      post: "/v1/forward-path-rules/rebuild-iptables"
      body: "*"
    };
  }

  // ================= iptables相关接口 =================

  // 获取转发路径规则相关的iptables配置（只读）
  rpc GetForwardPathRuleIptables(nspass.api.iptables.v1.GetForwardPathRuleIptablesRequest) returns (nspass.api.iptables.v1.GetForwardPathRuleIptablesResponse) {
    option (google.api.http) = {
      get: "/v1/forward-path-rules/{rule_id}/iptables"
    };
  }

  // 获取服务器iptables配置（只读，用于前端查询）
  rpc GetServerIptablesConfig(nspass.api.iptables.v1.GetServerIptablesConfigRequest) returns (nspass.api.iptables.v1.GetServerIptablesConfigResponse) {
    option (google.api.http) = {
      get: "/v1/servers/{server_id}/iptables"
    };
  }
}
