syntax = "proto3";

package nspass.api.dashboard.v1;

option go_package = "github.com/moooyo/nspass-proto/generated/api/dashboard;nspassapidashboard";

import "common.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// 组件状态枚举
enum ComponentStatus {
  COMPONENT_STATUS_UNSPECIFIED = 0;
  COMPONENT_STATUS_UP = 1;
  COMPONENT_STATUS_DOWN = 2;
  COMPONENT_STATUS_DEGRADED = 3;
}

// 健康状态枚举
enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_HEALTHY = 1;
  HEALTH_STATUS_WARNING = 2;
  HEALTH_STATUS_CRITICAL = 3;
}

// 告警类型枚举
enum AlertType {
  ALERT_TYPE_UNSPECIFIED = 0;
  ALERT_TYPE_INFO = 1;
  ALERT_TYPE_WARNING = 2;
  ALERT_TYPE_ERROR = 3;
}

// 时间周期枚举
enum TimePeriod {
  TIME_PERIOD_UNSPECIFIED = 0;
  TIME_PERIOD_DAY = 1;
  TIME_PERIOD_WEEK = 2;
  TIME_PERIOD_MONTH = 3;
}

// 日志级别枚举
enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_INFO = 1;
  LOG_LEVEL_WARNING = 2;
  LOG_LEVEL_ERROR = 3;
}

// 系统概览数据
message SystemOverview {
  int32 user_count = 1;
  int32 server_count = 2;
  int32 rule_count = 3;
  double monthly_traffic = 4; // GB
}

// 系统组件状态
message SystemComponent {
  string name = 1;
  ComponentStatus status = 2;
  optional string message = 3;
}

// 系统健康状态
message SystemHealth {
  HealthStatus overall = 1;
  repeated SystemComponent components = 2;
}

// 流量趋势项
message TrafficTrendItem {
  string date = 1;
  double traffic = 2; // GB
}

// 地理流量分布
message TrafficByRegion {
  string region = 1;
  string country = 2;
  double traffic = 3;
  int32 users = 4;
}

// 实时流量数据
message RealTimeTraffic {
  string timestamp = 1;
  double upload = 2; // MB/s
  double download = 3; // MB/s
  int32 connections = 4;
}

// 系统性能数据
message SystemPerformance {
  double cpu_usage = 1; // 百分比
  double memory_usage = 2; // 百分比
  double disk_usage = 3; // 百分比
  double network_in = 4; // MB/s
  double network_out = 5; // MB/s
}

// 系统告警
message SystemAlert {
  int32 id = 1;
  AlertType type = 2;
  string message = 3;
  string timestamp = 4;
  bool resolved = 5;
}

// 热门规则
message TopRule {
  string rule_id = 1;
  string rule_name = 2;
  double traffic = 3;
  int32 connections = 4;
}

// 规则状态统计
message RuleStatusStats {
  int32 active = 1;
  int32 paused = 2;
  int32 error = 3;
  int32 total = 4;
}

// 服务器状态项
message ServerStatusItem {
  string region = 1;
  int32 online = 2;
  int32 offline = 3;
  int32 total = 4;
}

// 用户流量占比项
message UserTrafficItem {
  string user = 1;
  double value = 2; // 百分比
  double traffic = 3; // 实际流量GB
}

// 日志项
message LogItem {
  string timestamp = 1;
  string level = 2;
  string message = 3;
}

// 日志摘要
message LogSummary {
  int32 total = 1;
  int32 info = 2;
  int32 warning = 3;
  int32 error = 4;
  repeated LogItem recent_logs = 5;
}

// === 请求消息 ===

// 流量趋势查询请求
message GetTrafficTrendRequest {
  optional int32 days = 1;
  optional string start_date = 2;
  optional string end_date = 3;
}

// 获取热门规则请求
message GetTopRulesRequest {
  int32 limit = 1;
}

// 用户流量统计查询请求
message GetUserTrafficStatsRequest {
  optional int32 limit = 1;
  optional TimePeriod period = 2;
}

// 获取日志摘要请求
message GetLogSummaryRequest {
  optional int32 hours = 1;
  optional LogLevel level = 2;
}

// === 响应消息 ===

message GetSystemOverviewResponse {
  nspass.common.v1.ApiResponse status = 1;
  optional SystemOverview data = 2;
}

message GetSystemHealthResponse {
  nspass.common.v1.ApiResponse status = 1;
  optional SystemHealth data = 2;
}

message GetTrafficTrendResponse {
  nspass.common.v1.ApiResponse status = 1;
  repeated TrafficTrendItem data = 2;
}

message GetTrafficByRegionResponse {
  nspass.common.v1.ApiResponse status = 1;
  repeated TrafficByRegion data = 2;
}

message GetRealTimeTrafficResponse {
  nspass.common.v1.ApiResponse status = 1;
  repeated RealTimeTraffic data = 2;
}

message GetSystemPerformanceResponse {
  nspass.common.v1.ApiResponse status = 1;
  optional SystemPerformance data = 2;
}

message GetSystemAlertsResponse {
  nspass.common.v1.ApiResponse status = 1;
  repeated SystemAlert data = 2;
}

message GetTopRulesResponse {
  nspass.common.v1.ApiResponse status = 1;
  repeated TopRule data = 2;
}

message GetRuleStatusStatsResponse {
  nspass.common.v1.ApiResponse status = 1;
  optional RuleStatusStats data = 2;
}

message GetServerStatusStatsResponse {
  nspass.common.v1.ApiResponse status = 1;
  repeated ServerStatusItem data = 2;
}

message GetUserTrafficStatsResponse {
  nspass.common.v1.ApiResponse status = 1;
  repeated UserTrafficItem data = 2;
}

message GetLogSummaryResponse {
  nspass.common.v1.ApiResponse status = 1;
  optional LogSummary data = 2;
}

message RefreshDashboardResponse {
  nspass.common.v1.ApiResponse status = 1;
}

// 仪表板服务
service DashboardService {
  // 获取系统概览
  // 
  // 获取系统的基本统计信息，包括用户数、服务器数、规则数和月度流量等。
  rpc GetSystemOverview(google.protobuf.Empty) returns (GetSystemOverviewResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/overview"
    };
  }

  // 获取系统健康状态
  // 
  // 检查系统各组件的运行状态，包括数据库、缓存、网络等。
  rpc GetSystemHealth(google.protobuf.Empty) returns (GetSystemHealthResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/health"
    };
  }

  // 获取流量趋势
  // 
  // 获取指定时间范围内的流量趋势数据，用于图表展示。
  rpc GetTrafficTrend(GetTrafficTrendRequest) returns (GetTrafficTrendResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/traffic-trend"
    };
  }

  // 获取按地区分布的流量
  // 
  // 统计不同地区的流量使用情况，用于地理分布图。
  rpc GetTrafficByRegion(google.protobuf.Empty) returns (GetTrafficByRegionResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/traffic-by-region"
    };
  }

  // 获取实时流量
  // 
  // 获取当前的实时流量数据，包括上传、下载速度和连接数。
  rpc GetRealTimeTraffic(google.protobuf.Empty) returns (GetRealTimeTrafficResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/real-time-traffic"
    };
  }

  // 获取系统性能数据
  // 
  // 获取系统的性能指标，如CPU、内存、磁盘使用率等。
  rpc GetSystemPerformance(google.protobuf.Empty) returns (GetSystemPerformanceResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/performance"
    };
  }

  // 获取系统警报
  // 
  // 获取当前的系统警报和通知信息。
  rpc GetSystemAlerts(google.protobuf.Empty) returns (GetSystemAlertsResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/alerts"
    };
  }

  // 获取热门规则
  // 
  // 获取流量使用最多的转发规则排行榜。
  rpc GetTopRules(GetTopRulesRequest) returns (GetTopRulesResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/top-rules"
    };
  }

  // 获取规则状态统计
  // 
  // 统计不同状态的规则数量分布。
  rpc GetRuleStatus(google.protobuf.Empty) returns (GetRuleStatusStatsResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/rule-status"
    };
  }

  // 获取服务器状态统计
  // 
  // 统计不同状态的服务器数量分布。
  rpc GetServerStatus(google.protobuf.Empty) returns (GetServerStatusStatsResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/server-status"
    };
  }

  // 获取用户流量统计
  // 
  // 获取用户流量使用的统计信息。
  rpc GetUserTrafficStats(GetUserTrafficStatsRequest) returns (GetUserTrafficStatsResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/user-traffic-stats"
    };
  }

  // 获取日志摘要
  // 
  // 获取系统日志的摘要信息，包括错误、警告等。
  rpc GetLogSummary(GetLogSummaryRequest) returns (GetLogSummaryResponse) {
    option (google.api.http) = {
      get: "/v1/dashboard/log-summary"
    };
  }

  // 刷新仪表板
  // 
  // 强制刷新仪表板的所有数据缓存。
  rpc RefreshDashboard(google.protobuf.Empty) returns (RefreshDashboardResponse) {
    option (google.api.http) = {
      post: "/v1/dashboard/refresh"
    };
  }
} 