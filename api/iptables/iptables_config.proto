syntax = "proto3";

package nspass.api.iptables.v1;

option go_package = "github.com/moooyo/nspass-proto/generated/api/iptables;nspassapiiptables";

import "common.proto";
import "google/api/annotations.proto";
import "model/iptables.proto";

// ========================= 前端只读查询接口 =========================

// 获取服务器iptables配置列表请求
message GetServerIptablesConfigsRequest {
  string server_id = 1;                         // 服务器ID
  optional nspass.model.v1.IptablesTableType table_type = 2; // 表类型过滤
  optional nspass.model.v1.IptablesChainType chain_type = 3; // 链类型过滤
  optional nspass.model.v1.IptablesProtocol protocol = 4;    // 协议过滤
  optional bool is_enabled = 5;                 // 是否启用过滤
  optional int32 page = 6;                      // 页码
  optional int32 page_size = 7;                 // 每页大小
}

// 获取服务器iptables配置列表响应
message GetServerIptablesConfigsResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  repeated nspass.model.v1.IptablesConfig data = 2;
  optional nspass.common.v1.PaginationResponse pagination = 3;
}

// 获取服务器iptables概览请求
message GetServerIptablesOverviewRequest {
  string server_id = 1;                         // 服务器ID
}

// 获取服务器iptables概览响应
message GetServerIptablesOverviewResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  optional nspass.model.v1.IptablesServerConfig data = 2;
}

// 获取服务器iptables生成的规则请求
message GetServerIptablesRulesRequest {
  string server_id = 1;                         // 服务器ID
  optional bool only_enabled = 2;               // 仅包含启用的配置
}

// 获取服务器iptables生成的规则响应
message GetServerIptablesRulesResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  repeated nspass.model.v1.IptablesGeneratedRule data = 2;
  optional int32 total_rules = 3;                        // 总规则数
  optional int32 valid_rules = 4;                        // 有效规则数
  optional int32 invalid_rules = 5;                      // 无效规则数
}

// 获取服务器iptables脚本请求
message GetServerIptablesScriptRequest {
  string server_id = 1;                         // 服务器ID
  optional bool only_enabled = 2;               // 仅包含启用的配置
  optional string format = 3;                   // 脚本格式 (bash/shell)
}

// 获取服务器iptables脚本响应
message GetServerIptablesScriptResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  nspass.model.v1.IptablesScript data = 4;
}

// 获取单个iptables配置请求
message GetIptablesConfigRequest {
  string server_id = 1;                         // 服务器ID
  int32 config_id = 2;                          // 配置ID
}

// 获取单个iptables配置响应
message GetIptablesConfigResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  nspass.model.v1.IptablesConfig data = 4;
}



// ========================= 转发路径规则相关消息 =========================

// 获取转发路径规则iptables配置请求
message GetForwardPathRuleIptablesRequest {
  string rule_id = 1;                           // 规则ID
}

// 获取转发路径规则iptables配置响应
message GetForwardPathRuleIptablesResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  repeated nspass.model.v1.IptablesConfigInfo data = 2;
}

// 获取服务器iptables配置请求（简化版，用于转发路径规则接口）
message GetServerIptablesConfigRequest {
  string server_id = 1;                         // 服务器ID
}

// 获取服务器iptables配置响应（简化版，用于转发路径规则接口）
message GetServerIptablesConfigResponse {
  nspass.common.v1.ApiResponseStatus status = 1;
  repeated nspass.model.v1.IptablesConfigInfo data = 2;
}

// ========================= 服务定义 =========================

// iptables配置管理服务
service IptablesConfigService {
  // ===================== 前端只读查询接口 =====================

  // 获取服务器iptables配置列表
  rpc GetServerIptablesConfigs(GetServerIptablesConfigsRequest) returns (GetServerIptablesConfigsResponse) {
    option (google.api.http) = {
      get: "/v1/servers/{server_id}/iptables/configs"
    };
  }

  // 获取服务器iptables概览
  rpc GetServerIptablesOverview(GetServerIptablesOverviewRequest) returns (GetServerIptablesOverviewResponse) {
    option (google.api.http) = {
      get: "/v1/servers/{server_id}/iptables/overview"
    };
  }

  // 获取服务器iptables生成的规则
  rpc GetServerIptablesRules(GetServerIptablesRulesRequest) returns (GetServerIptablesRulesResponse) {
    option (google.api.http) = {
      get: "/v1/servers/{server_id}/iptables/rules"
    };
  }

  // 获取服务器iptables脚本
  rpc GetServerIptablesScript(GetServerIptablesScriptRequest) returns (GetServerIptablesScriptResponse) {
    option (google.api.http) = {
      get: "/v1/servers/{server_id}/iptables/script"
    };
  }

  // 获取单个iptables配置
  rpc GetIptablesConfig(GetIptablesConfigRequest) returns (GetIptablesConfigResponse) {
    option (google.api.http) = {
      get: "/v1/servers/{server_id}/iptables/configs/{config_id}"
    };
  }
}
