syntax = "proto3";

package nspass.api.iptables.v1;

option go_package = "github.com/moooyo/nspass-proto/generated/api/iptables;nspassapiiptables";

import "common.proto";
import "google/api/annotations.proto";
import "model/iptables.proto";

// ========================= 前端只读查询接口 =========================

// 获取服务器iptables配置列表请求
message GetServerIptablesConfigsRequest {
  string server_id = 1;                         // 服务器ID
  optional nspass.model.v1.IptablesTableType table_type = 2; // 表类型过滤
  optional nspass.model.v1.IptablesChainType chain_type = 3; // 链类型过滤
  optional nspass.model.v1.IptablesProtocol protocol = 4;    // 协议过滤
  optional bool is_enabled = 5;                 // 是否启用过滤
  optional int32 page = 6;                      // 页码
  optional int32 page_size = 7;                 // 每页大小
}

// 获取服务器iptables配置列表响应
message GetServerIptablesConfigsResponse {
  nspass.common.v1.ApiResponse response = 1;
  repeated nspass.model.v1.IptablesConfig configs = 2;
  nspass.common.v1.PaginationResponse pagination = 3;
}

// 获取服务器iptables概览请求
message GetServerIptablesOverviewRequest {
  string server_id = 1;                         // 服务器ID
}

// 获取服务器iptables概览响应
message GetServerIptablesOverviewResponse {
  nspass.common.v1.ApiResponse response = 1;
  nspass.model.v1.IptablesServerConfig overview = 2;
}

// 获取服务器iptables生成的规则请求
message GetServerIptablesRulesRequest {
  string server_id = 1;                         // 服务器ID
  optional bool only_enabled = 2;               // 仅包含启用的配置
}

// 获取服务器iptables生成的规则响应
message GetServerIptablesRulesResponse {
  nspass.common.v1.ApiResponse response = 1;
  repeated nspass.model.v1.IptablesGeneratedRule rules = 2;
  int32 total_rules = 3;                        // 总规则数
  int32 valid_rules = 4;                        // 有效规则数
  int32 invalid_rules = 5;                      // 无效规则数
}

// 获取服务器iptables脚本请求
message GetServerIptablesScriptRequest {
  string server_id = 1;                         // 服务器ID
  optional bool only_enabled = 2;               // 仅包含启用的配置
  optional string format = 3;                   // 脚本格式 (bash/shell)
}

// 获取服务器iptables脚本响应
message GetServerIptablesScriptResponse {
  nspass.common.v1.ApiResponse response = 1;
  nspass.model.v1.IptablesScript script = 2;
}

// 获取单个iptables配置请求
message GetIptablesConfigRequest {
  string server_id = 1;                         // 服务器ID
  string config_name = 2;                       // 配置名称
}

// 获取单个iptables配置响应
message GetIptablesConfigResponse {
  nspass.common.v1.ApiResponse response = 1;
  nspass.model.v1.IptablesConfig config = 2;
}

// ========================= 后端重建接口 =========================

// 重建服务器iptables配置请求
message RebuildServerIptablesRequest {
  string server_id = 1;                         // 服务器ID
  optional bool force_rebuild = 2;              // 强制重建
  optional bool backup_existing = 3;            // 备份现有配置
  repeated string include_configs = 4;          // 包含的配置名称（空则全部）
  repeated string exclude_configs = 5;          // 排除的配置名称
}

// 重建服务器iptables配置响应
message RebuildServerIptablesResponse {
  nspass.common.v1.ApiResponse response = 1;
  nspass.model.v1.IptablesRebuildTask task = 2;
}

// 获取重建任务状态请求
message GetRebuildTaskStatusRequest {
  string task_id = 1;                           // 任务ID
}

// 获取重建任务状态响应
message GetRebuildTaskStatusResponse {
  nspass.common.v1.ApiResponse response = 1;
  nspass.model.v1.IptablesRebuildTask task = 2;
}

// 批量重建多个服务器iptables配置请求
message BatchRebuildServersIptablesRequest {
  repeated string server_ids = 1;               // 服务器ID列表
  optional bool force_rebuild = 2;              // 强制重建
  optional bool backup_existing = 3;            // 备份现有配置
}

// 批量重建多个服务器iptables配置响应
message BatchRebuildServersIptablesResponse {
  nspass.common.v1.ApiResponse response = 1;
  repeated nspass.model.v1.IptablesRebuildTask tasks = 2;
}

// 验证服务器iptables配置请求
message ValidateServerIptablesRequest {
  string server_id = 1;                         // 服务器ID
  optional bool dry_run = 2;                    // 仅验证不执行
}

// 验证服务器iptables配置响应
message ValidateServerIptablesResponse {
  nspass.common.v1.ApiResponse response = 1;
  bool is_valid = 2;                            // 是否有效
  repeated string validation_errors = 3;        // 验证错误
  repeated string validation_warnings = 4;      // 验证警告
  int32 total_rules = 5;                        // 总规则数
  int32 valid_rules = 6;                        // 有效规则数
  int32 invalid_rules = 7;                      // 无效规则数
}

// 清理服务器iptables配置请求
message CleanupServerIptablesRequest {
  string server_id = 1;                         // 服务器ID
  optional bool remove_disabled = 2;            // 移除禁用配置
  optional bool remove_outdated = 3;            // 移除过时配置
  optional int32 days_threshold = 4;            // 天数阈值
}

// 清理服务器iptables配置响应
message CleanupServerIptablesResponse {
  nspass.common.v1.ApiResponse response = 1;
  int32 removed_configs = 2;                    // 移除的配置数
  repeated string removed_config_names = 3;     // 移除的配置名称
}

// ========================= 转发路径规则相关消息 =========================

// 获取转发路径规则iptables配置请求
message GetForwardPathRuleIptablesRequest {
  string rule_id = 1;                           // 规则ID
}

// 获取转发路径规则iptables配置响应
message GetForwardPathRuleIptablesResponse {
  nspass.common.v1.ApiResponse response = 1;
  repeated nspass.model.v1.IptablesConfigInfo configs = 2;
}

// 重建转发路径规则iptables配置请求
message RebuildForwardPathRuleIptablesRequest {
  string rule_id = 1;                           // 规则ID
  optional bool force_rebuild = 2;              // 强制重建
  optional bool backup_existing = 3;            // 备份现有配置
}

// 重建转发路径规则iptables配置响应
message RebuildForwardPathRuleIptablesResponse {
  nspass.common.v1.ApiResponse response = 1;
  nspass.model.v1.IptablesRebuildTask task = 2;
}

// 获取服务器iptables配置请求（简化版，用于转发路径规则接口）
message GetServerIptablesConfigRequest {
  string server_id = 1;                         // 服务器ID
}

// 获取服务器iptables配置响应（简化版，用于转发路径规则接口）
message GetServerIptablesConfigResponse {
  nspass.common.v1.ApiResponse response = 1;
  repeated nspass.model.v1.IptablesConfigInfo configs = 2;
}

// ========================= 服务定义 =========================

// iptables配置管理服务
service IptablesConfigService {
  // ===================== 前端只读查询接口 =====================

  // 获取服务器iptables配置列表
  rpc GetServerIptablesConfigs(GetServerIptablesConfigsRequest) returns (GetServerIptablesConfigsResponse) {
    option (google.api.http) = {
      get: "/api/v1/servers/{server_id}/iptables/configs"
    };
  }

  // 获取服务器iptables概览
  rpc GetServerIptablesOverview(GetServerIptablesOverviewRequest) returns (GetServerIptablesOverviewResponse) {
    option (google.api.http) = {
      get: "/api/v1/servers/{server_id}/iptables/overview"
    };
  }

  // 获取服务器iptables生成的规则
  rpc GetServerIptablesRules(GetServerIptablesRulesRequest) returns (GetServerIptablesRulesResponse) {
    option (google.api.http) = {
      get: "/api/v1/servers/{server_id}/iptables/rules"
    };
  }

  // 获取服务器iptables脚本
  rpc GetServerIptablesScript(GetServerIptablesScriptRequest) returns (GetServerIptablesScriptResponse) {
    option (google.api.http) = {
      get: "/api/v1/servers/{server_id}/iptables/script"
    };
  }

  // 获取单个iptables配置
  rpc GetIptablesConfig(GetIptablesConfigRequest) returns (GetIptablesConfigResponse) {
    option (google.api.http) = {
      get: "/api/v1/servers/{server_id}/iptables/configs/{config_name}"
    };
  }

  // ===================== 后端重建接口 =====================

  // 重建服务器iptables配置
  rpc RebuildServerIptables(RebuildServerIptablesRequest) returns (RebuildServerIptablesResponse) {
    option (google.api.http) = {
      post: "/api/v1/servers/{server_id}/iptables/rebuild"
      body: "*"
    };
  }

  // 获取重建任务状态
  rpc GetRebuildTaskStatus(GetRebuildTaskStatusRequest) returns (GetRebuildTaskStatusResponse) {
    option (google.api.http) = {
      get: "/api/v1/iptables/rebuild-tasks/{task_id}"
    };
  }

  // 批量重建多个服务器iptables配置
  rpc BatchRebuildServersIptables(BatchRebuildServersIptablesRequest) returns (BatchRebuildServersIptablesResponse) {
    option (google.api.http) = {
      post: "/api/v1/iptables/batch-rebuild"
      body: "*"
    };
  }

  // 验证服务器iptables配置
  rpc ValidateServerIptables(ValidateServerIptablesRequest) returns (ValidateServerIptablesResponse) {
    option (google.api.http) = {
      post: "/api/v1/servers/{server_id}/iptables/validate"
      body: "*"
    };
  }

  // 清理服务器iptables配置
  rpc CleanupServerIptables(CleanupServerIptablesRequest) returns (CleanupServerIptablesResponse) {
    option (google.api.http) = {
      post: "/api/v1/servers/{server_id}/iptables/cleanup"
      body: "*"
    };
  }
}
