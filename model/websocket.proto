syntax = "proto3";

package nspass.model.v1;

option go_package = "github.com/moooyo/nspass-proto/generated/model;model";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "model/egressItem.proto";
import "model/iptables.proto";

// ========================================================================
// WebSocket 通信协议说明
// ========================================================================
//
// NSPass WebSocket 通信统一使用 Protocol Buffers 二进制格式进行数据交换。
//
// 连接方式:
//   - 连接URL: ws://server:port/ws?agent_id={agent_id}&token={token}
//   - 或通过Header传递token: Authorization: Bearer {token}
//
// 消息格式:
//   所有WebSocket消息都使用Protocol Buffers二进制格式，基于WebSocketMessage结构：
//   - 使用websocket.BinaryMessage类型发送和接收
//   - 消息体为WebSocketMessage的protobuf序列化数据
//
// 任务执行与ACK机制:
//   1. 任务发送流程：
//      - 后端创建WebSocketMessage，设置：
//        * id: 随机生成的消息ID（用于传输层标识）
//        * correlation_id: 任务ID（用于业务逻辑关联）
//        * payload: TaskMessage（任务详情）
//
//   2. 任务ACK流程：
//      - Agent执行任务完成后，创建ACK响应：
//        * 创建AckMessage设置执行结果
//        * 将AckMessage放入WebSocketMessage.payload
//        * 重要：在WebSocketMessage.correlation_id中设置原始任务ID
//
//   3. 后端ACK处理：
//      - 从WebSocketMessage.correlation_id获取原始任务ID
//      - 使用该任务ID更新数据库中的任务状态
//      - 不使用AckMessage.message_id作为任务ID
//
// 关键原则:
//   - WebSocketMessage.id：传输层消息标识，每次通信唯一
//   - WebSocketMessage.correlation_id：业务层关联标识，用于请求响应匹配
//   - 任务ID始终通过correlation_id传递，确保业务逻辑正确性
//
// 错误处理:
//   - 无效的protobuf格式会导致连接错误
//   - 缺少correlation_id的ACK消息会被拒绝处理
//   - 建议Agent实现重连机制
//
// 示例代码 (JavaScript):
//   const message = {
//     id: "msg_" + Date.now(),
//     type: "WEBSOCKET_MESSAGE_TYPE_HEARTBEAT",
//     timestamp: new Date().toISOString(),
//     payload: {
//       agent_id: "agent_001",
//       status: "online"
//     }
//   };
//   websocket.send(JSON.stringify(message));
//
// 示例代码 (Go):
//   message := &WebSocketMessage{
//     Id:        generateMessageID(),
//     Type:      WebSocketMessageType_WEBSOCKET_MESSAGE_TYPE_HEARTBEAT,
//     Timestamp: timestamppb.Now(),
//     Payload:   payload,
//   }
//   data, _ := json.Marshal(message)
//   conn.WriteMessage(websocket.TextMessage, data)
//
// ========================================================================

enum WebSocketMessageType {
  WEBSOCKET_MESSAGE_AGENT_TYPE_UNKNOWN                  = 0;
  WEBSOCKET_MESSAGE_AGENT_TYPE_HEARTBEAT                = 1;
  WEBSOCKET_MESSAGE_AGENT_TYPE_ACK                      = 2;
  WEBSOCKET_MESSAGE_AGENT_TYPE_METRICS                  = 3;
  WEBSOCKET_MESSAGE_AGENT_TYPE_ACTIVITY                 = 4;

  WEBSOCKET_MESSAGE_SERVER_TYPE_ACK                     = 50;
  WEBSOCKET_MESSAGE_SERVER_TYPE_HEARTBEAT               = 51;
  WEBSOCKET_MESSAGE_SERVER_TYPE_TASK                    = 52;
  WEBSOCKET_MESSAGE_SERVER_TYPE_EGRESS_CONFIG           = 53;
  WEBSOCKET_MESSAGE_SERVER_TYPE_IPTABLES_CONFIG         = 54;
  WEBSOCKET_MESSAGE_SERVER_TYPE_EGRESS_CONFIG_CHANGE    = 55;
  WEBSOCKET_MESSAGE_SERVER_TYPE_IPTABLES_CONFIG_CHANGE  = 56;
}

// 任务类型
enum TaskType {
  TASK_TYPE_UNSPECIFIED = 0;
  TASK_TYPE_CONFIG_UPDATE = 1;    // 配置更新
  TASK_TYPE_RESTART = 2;          // 重启服务
  TASK_TYPE_SYNC_RULES = 3;       // 同步规则
  TASK_TYPE_SYNC_USERS = 4;       // 同步用户
  TASK_TYPE_COLLECT_METRICS = 5;  // 收集监控数据
  TASK_TYPE_HEALTH_CHECK = 6;     // 健康检查
}

// 任务状态
enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0;
  TASK_STATUS_PENDING = 1;    // 等待执行
  TASK_STATUS_RUNNING = 2;    // 执行中
  TASK_STATUS_COMPLETED = 3;  // 已完成
  TASK_STATUS_FAILED = 4;     // 执行失败
  TASK_STATUS_CANCELLED = 5;  // 已取消
}

// 监控数据类型
enum MetricsType {
  METRICS_TYPE_UNSPECIFIED = 0;
  METRICS_TYPE_SYSTEM = 1;      // 系统监控
  METRICS_TYPE_TRAFFIC = 2;     // 流量监控
  METRICS_TYPE_CONNECTION = 3;  // 连接监控
  METRICS_TYPE_PERFORMANCE = 4; // 性能监控
  METRICS_TYPE_ERROR = 5;       // 错误监控
}

// WebSocket消息
// 
// WebSocket消息是所有通信的基础结构，支持请求-响应模式的关联。
// 当发送任务给Agent时，会设置correlation_id为任务ID，Agent在ACK响应时
// 必须在WebSocket消息级别设置相同的correlation_id来关联原始请求。
//
// 重要说明：
// 1. 发送任务时：WebSocketMessage.id = 随机消息ID，WebSocketMessage.correlation_id = 任务ID
// 2. ACK响应时：Agent必须在WebSocketMessage.correlation_id中设置原始任务ID
// 3. 后端处理ACK时，使用WebSocketMessage.correlation_id来获取原始任务ID，而不是AckMessage.message_id

message WebSocketMessage {
  string message_id                   = 1;                          // 消息ID：传输层唯一标识符
  WebSocketMessageType  message_type  = 2;         // Agent消息类型
  google.protobuf.Timestamp timestamp = 3;          // 时间戳
  google.protobuf.Any payload         = 4;                  // 消息载荷
  string correlation_id               = 5;                        // 关联ID：用于请求响应匹配的业务标识符
}


// 任务消息
//
// TaskMessage定义了要发送给Agent执行的任务详情。当后端需要Agent执行某个任务时，
// 会创建TaskMessage并通过WebSocket发送给目标Agent。
//
// 重要说明：
// 1. task_id是任务的唯一标识符，Agent必须在ACK响应中通过correlation_id返回此ID
// 2. parameters字段包含任务执行所需的具体参数，类型根据task_type确定
// 3. Agent收到任务后应立即开始执行，并在完成时发送ACK响应
//
// 发送流程：
// 1. 后端创建TaskMessage实例，设置所有必要字段
// 2. 将TaskMessage放入WebSocketMessage.payload中
// 3. 设置WebSocketMessage.correlation_id = TaskMessage.task_id
// 4. 通过WebSocket发送给指定Agent
message TaskMessage {
  string task_id = 1;                              // 任务ID：任务的唯一标识符，用于后续状态跟踪和ACK关联
  TaskType task_type = 2;                          // 任务类型：定义任务的执行类型和行为
  string title = 3;                                // 任务标题：任务的简短描述
  string description = 4;                          // 任务描述：任务的详细说明
  google.protobuf.Any parameters = 5;              // 任务参数：执行任务所需的具体参数，类型根据task_type确定
  google.protobuf.Timestamp created_at = 6;        // 创建时间：任务创建的时间戳
  google.protobuf.Timestamp deadline = 7;          // 截止时间：任务必须完成的最后期限
  int32 priority = 8;                              // 优先级：任务执行优先级 (1-10, 10最高)
  int32 retry_count = 9;                           // 重试次数：当前已重试的次数
  int32 max_retries = 10;                          // 最大重试次数：任务失败时的最大重试限制
}

// 监控数据消息
message MetricsMessage {
  string agent_id = 1;                             // Agent ID
  MetricsType metrics_type = 2;                    // 监控类型
  google.protobuf.Timestamp timestamp = 3;        // 时间戳
  google.protobuf.Any data = 4;                   // 监控数据
  map<string, string> labels = 5;                 // 标签
}

// 心跳消息
message HeartbeatMessage {
  string agent_id = 1;                              // Agent ID
  google.protobuf.Timestamp timestamp = 2;          // 时间戳
  string status = 3;                                // 状态
  map<string, string> metadata = 4;                 // 元数据
}

// 确认消息（ACK）
//
// ACK消息用于确认收到并处理某个消息，特别是任务消息的执行结果。
// 
// 重要说明：
// 1. message_id字段仅用于标识被确认的WebSocket消息ID，不应用于业务逻辑
// 2. 业务逻辑中的任务ID关联应通过外层WebSocketMessage.correlation_id字段获取
// 3. result字段通常包含TaskResult类型的数据，包含任务执行的详细结果
//
// 处理流程：
// 1. Agent收到任务 -> 执行任务 -> 创建ACK消息
// 2. ACK消息中设置success/error_message/result表示执行结果  
// 3. 将ACK消息放入WebSocketMessage.payload中
// 4. 重要：在外层WebSocketMessage.correlation_id中设置原始任务ID
// 5. 后端通过WebSocketMessage.correlation_id获取任务ID进行状态更新
message AckMessage {
  string message_id = 1;                           // 原WebSocket消息ID：被确认的消息的传输层标识符
  bool success = 2;                                // 是否成功：任务执行是否成功的标志
  string error_message = 3;                        // 错误信息：任务执行失败时的错误描述
  google.protobuf.Any result = 4;                 // 结果数据：任务执行结果，通常为TaskResult类型
}

// 错误消息
message ErrorMessage {
  string code = 1;                                  // 错误代码
  string message = 2;                               // 错误消息
  string details = 3;                               // 错误详情
  google.protobuf.Timestamp timestamp = 4;          // 时间戳
}

// 任务执行结果
//
// TaskResult包含任务执行的详细结果信息，通常作为AckMessage.result字段的内容。
// 该结构提供了任务执行状态、时间信息和输出内容的完整记录。
//
// 使用场景：
// 1. Agent执行任务完成后，创建TaskResult实例
// 2. 将TaskResult序列化后放入AckMessage.result字段
// 3. 后端解析TaskResult获取任务执行详情并更新数据库
message TaskResult {
  string task_id = 1;                              // 任务ID：与原始任务保持一致的标识符
  TaskStatus status = 2;                           // 任务状态：执行结果状态（成功、失败等）
  google.protobuf.Timestamp started_at = 3;       // 开始时间：任务实际开始执行的时间
  google.protobuf.Timestamp completed_at = 4;     // 完成时间：任务执行完成的时间
  string output = 5;                               // 输出信息：任务执行过程中的输出内容或日志
  string error_message = 6;                        // 错误信息
  google.protobuf.Any result_data = 7;            // 结果数据
}

// 系统监控数据
message SystemMetrics {
  double cpu_usage = 1;                            // CPU使用率 (0-100)
  double memory_usage = 2;                         // 内存使用率 (0-100)
  double disk_usage = 3;                           // 磁盘使用率 (0-100)
  double load_average = 4;                         // 负载平均值
  int64 uptime = 5;                                // 运行时间(秒)
  int32 process_count = 6;                         // 进程数量
  int64 memory_total = 7;                          // 总内存(字节)
  int64 memory_used = 8;                           // 已用内存(字节)
  int64 disk_total = 9;                            // 总磁盘(字节)
  int64 disk_used = 10;                            // 已用磁盘(字节)
  int32 tcp_connections = 11;                      // TCP连接数
  double download_speed = 12;                      // 下载速度(字节/秒)
  double upload_speed = 13;                        // 上传速度(字节/秒)
  int64 swap_total = 14;                           // 总SWAP(字节)
  int64 swap_used = 15;                            // 已用SWAP(字节)
}

// 流量监控数据
message TrafficMetrics {
  int64 bytes_in = 1;                              // 入流量(字节)
  int64 bytes_out = 2;                             // 出流量(字节)
  int64 packets_in = 3;                            // 入包数
  int64 packets_out = 4;                           // 出包数
  int32 connection_count = 5;                      // 连接数
  double bandwidth_in = 6;                         // 入带宽(bps)
  double bandwidth_out = 7;                        // 出带宽(bps)
  google.protobuf.Timestamp period_start = 8;     // 统计周期开始时间
  google.protobuf.Timestamp period_end = 9;       // 统计周期结束时间
}

// 连接监控数据
message ConnectionMetrics {
  int32 active_connections = 1;                    // 活跃连接数
  int32 total_connections = 2;                     // 总连接数
  int32 failed_connections = 3;                    // 失败连接数
  double average_response_time = 4;                // 平均响应时间(ms)
  int32 concurrent_users = 5;                      // 并发用户数
  repeated string top_destinations = 6;            // 热门目标地址
  map<string, int32> connection_by_protocol = 7;   // 按协议分类的连接数
}

// 性能监控数据
message PerformanceMetrics {
  double response_time = 1;                        // 响应时间(ms)
  double throughput = 2;                           // 吞吐量(请求/秒)
  double error_rate = 3;                           // 错误率(0-1)
  int32 queue_size = 4;                            // 队列大小
  double memory_usage = 5;                         // 内存使用情况
  double cpu_usage = 6;                            // CPU使用情况
  map<string, double> custom_metrics = 7;          // 自定义指标
}

// 错误监控数据
message ErrorMetrics {
  int32 total_errors = 1;                          // 总错误数
  int32 critical_errors = 2;                       // 严重错误数
  int32 warning_errors = 3;                        // 警告错误数
  repeated string error_types = 4;                 // 错误类型
  map<string, int32> error_count_by_type = 5;      // 按类型统计的错误数
  google.protobuf.Timestamp last_error_time = 6;   // 最后错误时间
}

// 任务配置更新参数
message ConfigUpdateTaskParams {
  string config_type = 1;                          // 配置类型
  string config_content = 2;                       // 配置内容
  bool restart_required = 3;                       // 是否需要重启
  map<string, string> additional_params = 4;       // 附加参数
}

// 任务重启参数
message RestartTaskParams {
  string service_name = 1;                         // 服务名称
  bool graceful = 2;                               // 是否优雅重启
  int32 timeout = 3;                               // 超时时间(秒)
  map<string, string> additional_params = 4;       // 附加参数
}

// 任务同步规则参数
message SyncRulesTaskParams {
  repeated string rule_ids = 1;                    // 规则ID列表
  bool full_sync = 2;                              // 是否全量同步
  map<string, string> additional_params = 3;       // 附加参数
}

// 任务同步用户参数
message SyncUsersTaskParams {
  repeated string user_ids = 1;                    // 用户ID列表
  bool full_sync = 2;                              // 是否全量同步
  map<string, string> additional_params = 3;       // 附加参数
}

// 任务收集监控数据参数
message CollectMetricsTaskParams {
  repeated MetricsType metrics_types = 1;          // 监控类型列表
  int32 interval = 2;                              // 收集间隔(秒)
  int32 duration = 3;                              // 收集持续时间(秒)
  map<string, string> additional_params = 4;       // 附加参数
}

// 任务健康检查参数
message HealthCheckTaskParams {
  repeated string check_types = 1;                 // 检查类型列表
  int32 timeout = 2;                               // 超时时间(秒)
  map<string, string> additional_params = 3;       // 附加参数
}

message AgentEgressConfigs {
  repeated nspass.model.v1.EgressItem egress_items = 1; // 出口配置项列表
}

message AgentIptablesConfigs {
  repeated nspass.model.v1.IptablesConfig iptables_rules = 1; // IPTables规则列表
}